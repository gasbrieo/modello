/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkspacesRouteImport } from './routes/workspaces/route'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspacesIndexImport } from './routes/workspaces/index'
import { Route as WorkspacesWorkspaceIdImport } from './routes/workspaces/$workspaceId'

// Create/Update Routes

const WorkspacesRouteRoute = WorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesIndexRoute = WorkspacesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspacesRouteRoute,
} as any)

const WorkspacesWorkspaceIdRoute = WorkspacesWorkspaceIdImport.update({
  id: '/$workspaceId',
  path: '/$workspaceId',
  getParentRoute: () => WorkspacesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesRouteImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId': {
      id: '/workspaces/$workspaceId'
      path: '/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdImport
      parentRoute: typeof WorkspacesRouteImport
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/'
      fullPath: '/workspaces/'
      preLoaderRoute: typeof WorkspacesIndexImport
      parentRoute: typeof WorkspacesRouteImport
    }
  }
}

// Create and export the route tree

interface WorkspacesRouteRouteChildren {
  WorkspacesWorkspaceIdRoute: typeof WorkspacesWorkspaceIdRoute
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
}

const WorkspacesRouteRouteChildren: WorkspacesRouteRouteChildren = {
  WorkspacesWorkspaceIdRoute: WorkspacesWorkspaceIdRoute,
  WorkspacesIndexRoute: WorkspacesIndexRoute,
}

const WorkspacesRouteRouteWithChildren = WorkspacesRouteRoute._addFileChildren(
  WorkspacesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces': typeof WorkspacesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/workspaces' | '/workspaces/$workspaceId' | '/workspaces/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/workspaces/$workspaceId' | '/workspaces'
  id:
    | '__root__'
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/workspaces/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspacesRouteRoute: typeof WorkspacesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspacesRouteRoute: WorkspacesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/workspaces"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/workspaces": {
      "filePath": "workspaces/route.tsx",
      "children": [
        "/workspaces/$workspaceId",
        "/workspaces/"
      ]
    },
    "/workspaces/$workspaceId": {
      "filePath": "workspaces/$workspaceId.tsx",
      "parent": "/workspaces"
    },
    "/workspaces/": {
      "filePath": "workspaces/index.tsx",
      "parent": "/workspaces"
    }
  }
}
ROUTE_MANIFEST_END */
